import { MockQueries } from '#src/test-utils/tenant.js';
import { ossConsolePath } from '@logto/schemas';
import koaConsoleRedirectProxy from './koa-console-redirect-proxy.js';
const { jest } = import.meta;
const hasActiveUsers = jest.fn();
const queries = new MockQueries({
  users: { hasActiveUsers }
});


// tests for the koaConsoleRedirectProxy function.
describe('koaConsoleRedirectProxy()', () => {
  afterEach(() => { // performed after each test
    jest.clearAllMocks();
  });

  it('should not call next() if ctx.path is \'/\' or \'/welcome\' and should redirect with \'ossConsolePath/welcome\'', () => {
    const ctx = createContextWithRouteParameters({
	    url: '/',
    });
    hasActiveUsers.mockResolvedValue(false); // set a return mocked value for hasActiveUsers

    koaConsoleRedirectProxy(queries)(mockCtx, mockNext);
    expect(mockNext).not.toHaveBeenCalled();
    expect(mockCtx.redirect).toHaveBeenCalledWith(`${ossConsolePath}/welcome`);
  });
  it('should not call next() if ctx.path is \'/\' or \'/welcome\' and should redirect with \'ossConsolePath\'', () => {
    mockCtx.path = '/';
    hasActiveUsers.mockResolvedValue(true); // set a return mocked value for hasActiveUsers

    koaConsoleRedirectProxy(queries)(mockCtx, mockNext);
    expect(mockNext).not.toHaveBeenCalled();
    expect(mockCtx.redirect).toHaveBeenCalledWith(`${ossConsolePath}`);
  });
  it('should call next() if ctx.path is \'/some_path\' or \'/welcome\' and should not redirect', () => {
    mockCtx.path = '/some_path';
    hasActiveUsers.mockResolvedValue(false); // set a return mocked value for hasActiveUsers

    koaConsoleRedirectProxy(queries)(mockCtx, mockNext);
    expect(mockNext).not.toHaveBeenCalled();
    expect(mockCtx.redirect).not.toHaveBeenCalled();
  });
});
